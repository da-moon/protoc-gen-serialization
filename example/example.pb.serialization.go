// Code generated by protoc-gen-serialization. DO NOT EDIT.
package example

import (
	"reflect"

	"strings"

	stacktrace "github.com/palantir/stacktrace"

	mapstructure "github.com/mitchellh/mapstructure"

	"encoding/json"

	"encoding/xml"
)

func EncodeStopRequestToMetadata(input StopRequest) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	e := reflect.ValueOf(&input).Elem()
	for i := 0; i < e.NumField(); i++ {
		name := e.Type().Field(i).Name
		if strings.HasPrefix(name, "XXX") {
			continue
		}
		// t := e.Type().Field(i).Type
		value := e.Field(i).Interface()
		result[name] = value
		// fmt.Printf("%#v %#v %#v\n", name, t, value)
	}
	return result, nil
}
func DecodeStopRequestFromMetadata(input map[string]interface{}) (*StopRequest, error) {
	md := &mapstructure.Metadata{}
	result := &StopRequest{}
	config := &mapstructure.DecoderConfig{
		Metadata: md,
		Result:   result,
	}
	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Decoding Metadata] mapstructure.NewDecoder(config) Failed with config arg %#v", config)
	}
	err = decoder.Decode(input)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Decoding Metadata] Decoding StopRequest from map[string]interface{} Failed with input arg %#v", input)
	}
	return result, nil
}
func EncodeStopRequestToJSON(input StopRequest) ([]byte, error) {
	result, err := json.Marshal(input)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Encode JSON] Encoding StopRequest to JSON Failed with input arg %#v", input)
	}
	return result, nil
}
func DecodeStopRequestFromJSON(input []byte) (*StopRequest, error) {
	result := &StopRequest{}
	err := json.Unmarshal(input, result)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Decode JSON] Encoding StopRequest from JSON Failed with input arg %x", input)
	}
	return result, nil
}
func EncodeStopRequestToXML(input StopRequest) ([]byte, error) {
	result, err := xml.Marshal(input)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Encode XML] Encoding StopRequest to XML Failed with input arg %#v", input)
	}
	return result, nil
}
func DecodeStopRequestFromXML(input []byte) (*StopRequest, error) {
	result := &StopRequest{}
	err := xml.Unmarshal(input, &result)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Decode XML] Encoding StopRequest from XML Failed with input arg %x", input)
	}
	return result, nil
}

func EncodeVersionRequestToMetadata(input VersionRequest) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	e := reflect.ValueOf(&input).Elem()
	for i := 0; i < e.NumField(); i++ {
		name := e.Type().Field(i).Name
		if strings.HasPrefix(name, "XXX") {
			continue
		}
		// t := e.Type().Field(i).Type
		value := e.Field(i).Interface()
		result[name] = value
		// fmt.Printf("%#v %#v %#v\n", name, t, value)
	}
	return result, nil
}
func DecodeVersionRequestFromMetadata(input map[string]interface{}) (*VersionRequest, error) {
	md := &mapstructure.Metadata{}
	result := &VersionRequest{}
	config := &mapstructure.DecoderConfig{
		Metadata: md,
		Result:   result,
	}
	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Decoding Metadata] mapstructure.NewDecoder(config) Failed with config arg %#v", config)
	}
	err = decoder.Decode(input)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Decoding Metadata] Decoding VersionRequest from map[string]interface{} Failed with input arg %#v", input)
	}
	return result, nil
}
func EncodeVersionRequestToJSON(input VersionRequest) ([]byte, error) {
	result, err := json.Marshal(input)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Encode JSON] Encoding VersionRequest to JSON Failed with input arg %#v", input)
	}
	return result, nil
}
func DecodeVersionRequestFromJSON(input []byte) (*VersionRequest, error) {
	result := &VersionRequest{}
	err := json.Unmarshal(input, result)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Decode JSON] Encoding VersionRequest from JSON Failed with input arg %x", input)
	}
	return result, nil
}
func EncodeVersionRequestToXML(input VersionRequest) ([]byte, error) {
	result, err := xml.Marshal(input)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Encode XML] Encoding VersionRequest to XML Failed with input arg %#v", input)
	}
	return result, nil
}
func DecodeVersionRequestFromXML(input []byte) (*VersionRequest, error) {
	result := &VersionRequest{}
	err := xml.Unmarshal(input, &result)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[Decode XML] Encoding VersionRequest from XML Failed with input arg %x", input)
	}
	return result, nil
}

// CamelToParam -
func CamelToParam(arg string) string {
	splitted := strings.Split(arg, "_")
	for k := range splitted {
		splitted[k] = strings.ToLower(splitted[k])
	}
	return strings.Join(splitted, "-")
}

// CamelToDot -
func CamelToDot(arg string) string {
	splitted := strings.Split(arg, "_")
	for k := range splitted {
		splitted[k] = strings.ToLower(splitted[k])
	}
	return strings.Join(splitted, "-")
}

// DotToCamel -
func DotToCamel(arg string) string {
	splitted := strings.Split(arg, ".")
	for k := range splitted {
		splitted[k] = strings.ToLower(splitted[k])
	}
	return strings.Join(splitted, "_")
}

// ParamToCamel -
func ParamToCamel(arg string) string {
	splitted := strings.Split(arg, "-")
	for k := range splitted {
		splitted[k] = strings.ToLower(splitted[k])
	}
	return strings.Join(splitted, "_")
}
